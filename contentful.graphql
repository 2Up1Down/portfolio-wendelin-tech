# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

interface Entry {
    contentfulMetadata: ContentfulMetadata!
    sys: Sys!
}

union RoomType = RoomTypeBathroom | RoomTypeBedroom | RoomTypeStoreroom

"Represents a binary file in a space. An asset can be any file type."
type Asset {
    contentType(locale: String): String
    contentfulMetadata: ContentfulMetadata!
    description(locale: String): String
    fileName(locale: String): String
    height(locale: String): Int
    linkedFrom(allowedLocales: [String]): AssetLinkingCollections
    size(locale: String): Int
    sys: Sys!
    title(locale: String): String
    url(locale: String, transform: ImageTransformOptions): String
    width(locale: String): Int
}

type AssetCollection {
    items: [Asset]!
    limit: Int!
    skip: Int!
    total: Int!
}

type AssetLinkingCollections {
    contentTypeLocationCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): ContentTypeLocationCollection
    entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
    roomBathroomCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): RoomBathroomCollection
    roomCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): RoomCollection
    unitCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): UnitCollection
}

"[See type definition](https://app.contentful.com/spaces/7jl72tq3q532/content_types/location)"
type ContentTypeLocation implements Entry {
    contentfulMetadata: ContentfulMetadata!
    description(locale: String): String
    featuredImage(locale: String, preview: Boolean): Asset
    imagesCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): AssetCollection
    linkedFrom(allowedLocales: [String]): ContentTypeLocationLinkingCollections
    roomsCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): ContentTypeLocationRoomsCollection
    slug(locale: String): String
    sys: Sys!
    title(locale: String): String
    unitsCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): ContentTypeLocationUnitsCollection
}

type ContentTypeLocationCollection {
    items: [ContentTypeLocation]!
    limit: Int!
    skip: Int!
    total: Int!
}

type ContentTypeLocationLinkingCollections {
    entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

type ContentTypeLocationRoomsCollection {
    items: [Room]!
    limit: Int!
    skip: Int!
    total: Int!
}

type ContentTypeLocationUnitsCollection {
    items: [Unit]!
    limit: Int!
    skip: Int!
    total: Int!
}

type ContentfulMetadata {
    tags: [ContentfulTag]!
}

"""

Represents a tag entity for finding and organizing content easily.
Find out more here: https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/content-tags
"""
type ContentfulTag {
    id: String
    name: String
}

type EntryCollection {
    items: [Entry]!
    limit: Int!
    skip: Int!
    total: Int!
}

"[See type definition](https://app.contentful.com/spaces/7jl72tq3q532/content_types/host)"
type Host implements Entry {
    contentfulMetadata: ContentfulMetadata!
    email(locale: String): String
    linkedFrom(allowedLocales: [String]): HostLinkingCollections
    name(locale: String): String
    sys: Sys!
    vorname(locale: String): String
}

type HostCollection {
    items: [Host]!
    limit: Int!
    skip: Int!
    total: Int!
}

type HostLinkingCollections {
    entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

type Query {
    asset(id: String!, locale: String, preview: Boolean): Asset
    assetCollection(limit: Int = 100, locale: String, order: [AssetOrder], preview: Boolean, skip: Int = 0, where: AssetFilter): AssetCollection
    contentTypeLocation(id: String!, locale: String, preview: Boolean): ContentTypeLocation
    contentTypeLocationCollection(limit: Int = 100, locale: String, order: [ContentTypeLocationOrder], preview: Boolean, skip: Int = 0, where: ContentTypeLocationFilter): ContentTypeLocationCollection
    entryCollection(limit: Int = 100, locale: String, order: [EntryOrder], preview: Boolean, skip: Int = 0, where: EntryFilter): EntryCollection
    host(id: String!, locale: String, preview: Boolean): Host
    hostCollection(limit: Int = 100, locale: String, order: [HostOrder], preview: Boolean, skip: Int = 0, where: HostFilter): HostCollection
    room(id: String!, locale: String, preview: Boolean): Room
    roomBathroom(id: String!, locale: String, preview: Boolean): RoomBathroom
    roomBathroomCollection(limit: Int = 100, locale: String, order: [RoomBathroomOrder], preview: Boolean, skip: Int = 0, where: RoomBathroomFilter): RoomBathroomCollection
    roomCollection(limit: Int = 100, locale: String, order: [RoomOrder], preview: Boolean, skip: Int = 0, where: RoomFilter): RoomCollection
    roomTypeBathroom(id: String!, locale: String, preview: Boolean): RoomTypeBathroom
    roomTypeBathroomCollection(limit: Int = 100, locale: String, order: [RoomTypeBathroomOrder], preview: Boolean, skip: Int = 0, where: RoomTypeBathroomFilter): RoomTypeBathroomCollection
    roomTypeBedroom(id: String!, locale: String, preview: Boolean): RoomTypeBedroom
    roomTypeBedroomCollection(limit: Int = 100, locale: String, order: [RoomTypeBedroomOrder], preview: Boolean, skip: Int = 0, where: RoomTypeBedroomFilter): RoomTypeBedroomCollection
    roomTypeStoreroom(id: String!, locale: String, preview: Boolean): RoomTypeStoreroom
    roomTypeStoreroomCollection(limit: Int = 100, locale: String, order: [RoomTypeStoreroomOrder], preview: Boolean, skip: Int = 0, where: RoomTypeStoreroomFilter): RoomTypeStoreroomCollection
    sometest(id: String!, locale: String, preview: Boolean): Sometest
    sometestCollection(limit: Int = 100, locale: String, order: [SometestOrder], preview: Boolean, skip: Int = 0, where: SometestFilter): SometestCollection
    unit(id: String!, locale: String, preview: Boolean): Unit
    unitCollection(limit: Int = 100, locale: String, order: [UnitOrder], preview: Boolean, skip: Int = 0, where: UnitFilter): UnitCollection
}

"[See type definition](https://app.contentful.com/spaces/7jl72tq3q532/content_types/room)"
type Room implements Entry {
    amentities(locale: String): [String]
    contentfulMetadata: ContentfulMetadata!
    description(locale: String): RoomDescription
    imagesCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): AssetCollection
    linkedFrom(allowedLocales: [String]): RoomLinkingCollections
    roomType(locale: String, preview: Boolean): Entry
    sys: Sys!
    title(locale: String): String
    type(locale: String, preview: Boolean): RoomType
}

"[See type definition](https://app.contentful.com/spaces/7jl72tq3q532/content_types/roomBathroom)"
type RoomBathroom implements Entry {
    amentities(locale: String): [String]
    contentfulMetadata: ContentfulMetadata!
    description(locale: String): String
    images(locale: String, preview: Boolean): Asset
    linkedFrom(allowedLocales: [String]): RoomBathroomLinkingCollections
    sys: Sys!
    title(locale: String): String
}

type RoomBathroomCollection {
    items: [RoomBathroom]!
    limit: Int!
    skip: Int!
    total: Int!
}

type RoomBathroomLinkingCollections {
    entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

type RoomCollection {
    items: [Room]!
    limit: Int!
    skip: Int!
    total: Int!
}

type RoomDescription {
    json: JSON!
    links: RoomDescriptionLinks!
}

type RoomDescriptionAssets {
    block: [Asset]!
    hyperlink: [Asset]!
}

type RoomDescriptionEntries {
    block: [Entry]!
    hyperlink: [Entry]!
    inline: [Entry]!
}

type RoomDescriptionLinks {
    assets: RoomDescriptionAssets!
    entries: RoomDescriptionEntries!
}

type RoomLinkingCollections {
    contentTypeLocationCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): ContentTypeLocationCollection
    entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
    unitCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): UnitCollection
}

"[See type definition](https://app.contentful.com/spaces/7jl72tq3q532/content_types/roomTypeBathroom)"
type RoomTypeBathroom implements Entry {
    bath(locale: String): Boolean
    bathroom(locale: String): String
    contentfulMetadata: ContentfulMetadata!
    hairdryer(locale: String): Boolean
    linkedFrom(allowedLocales: [String]): RoomTypeBathroomLinkingCollections
    shower(locale: String): Boolean
    sys: Sys!
}

type RoomTypeBathroomCollection {
    items: [RoomTypeBathroom]!
    limit: Int!
    skip: Int!
    total: Int!
}

type RoomTypeBathroomLinkingCollections {
    entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
    roomCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): RoomCollection
}

"[See type definition](https://app.contentful.com/spaces/7jl72tq3q532/content_types/roomTypeBedroom)"
type RoomTypeBedroom implements Entry {
    contentfulMetadata: ContentfulMetadata!
    couch(locale: String): Boolean
    desk(locale: String): Boolean
    doubleBed(locale: String): Boolean
    linkedFrom(allowedLocales: [String]): RoomTypeBedroomLinkingCollections
    singleBed(locale: String): Boolean
    sys: Sys!
}

type RoomTypeBedroomCollection {
    items: [RoomTypeBedroom]!
    limit: Int!
    skip: Int!
    total: Int!
}

type RoomTypeBedroomLinkingCollections {
    entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
    roomCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): RoomCollection
}

"[See type definition](https://app.contentful.com/spaces/7jl72tq3q532/content_types/roomTypeStoreroom)"
type RoomTypeStoreroom implements Entry {
    contentfulMetadata: ContentfulMetadata!
    linkedFrom(allowedLocales: [String]): RoomTypeStoreroomLinkingCollections
    locker(locale: String): Boolean
    sys: Sys!
}

type RoomTypeStoreroomCollection {
    items: [RoomTypeStoreroom]!
    limit: Int!
    skip: Int!
    total: Int!
}

type RoomTypeStoreroomLinkingCollections {
    entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
    roomCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): RoomCollection
}

"[See type definition](https://app.contentful.com/spaces/7jl72tq3q532/content_types/sometest)"
type Sometest implements Entry {
    contentfulMetadata: ContentfulMetadata!
    linkedFrom(allowedLocales: [String]): SometestLinkingCollections
    someText(locale: String): String
    sys: Sys!
}

type SometestCollection {
    items: [Sometest]!
    limit: Int!
    skip: Int!
    total: Int!
}

type SometestLinkingCollections {
    entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

type Sys {
    environmentId: String!
    firstPublishedAt: DateTime
    id: String!
    publishedAt: DateTime
    publishedVersion: Int
    spaceId: String!
}

"[See type definition](https://app.contentful.com/spaces/7jl72tq3q532/content_types/unit)"
type Unit implements Entry {
    contentfulMetadata: ContentfulMetadata!
    description(locale: String): String
    imagesCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): AssetCollection
    linkedFrom(allowedLocales: [String]): UnitLinkingCollections
    roomsCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): UnitRoomsCollection
    sys: Sys!
    title(locale: String): String
}

type UnitCollection {
    items: [Unit]!
    limit: Int!
    skip: Int!
    total: Int!
}

type UnitLinkingCollections {
    contentTypeLocationCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): ContentTypeLocationCollection
    entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

type UnitRoomsCollection {
    items: [Room]!
    limit: Int!
    skip: Int!
    total: Int!
}

enum AssetOrder {
    contentType_ASC
    contentType_DESC
    fileName_ASC
    fileName_DESC
    height_ASC
    height_DESC
    size_ASC
    size_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
    url_ASC
    url_DESC
    width_ASC
    width_DESC
}

enum ContentTypeLocationOrder {
    slug_ASC
    slug_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
    title_ASC
    title_DESC
}

enum EntryOrder {
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
}

enum HostOrder {
    email_ASC
    email_DESC
    name_ASC
    name_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
    vorname_ASC
    vorname_DESC
}

enum ImageFormat {
    AVIF
    "JPG image format."
    JPG
    """

    Progressive JPG format stores multiple passes of an image in progressively higher detail.
    When a progressive image is loading, the viewer will first see a lower quality pixelated version which
    will gradually improve in detail, until the image is fully downloaded. This is to display an image as
    early as possible to make the layout look as designed.
    """
    JPG_PROGRESSIVE
    "PNG image format"
    PNG
    """

    8-bit PNG images support up to 256 colors and weigh less than the standard 24-bit PNG equivalent.
    The 8-bit PNG format is mostly used for simple images, such as icons or logos.
    """
    PNG8
    "WebP image format."
    WEBP
}

enum ImageResizeFocus {
    "Focus the resizing on the bottom."
    BOTTOM
    "Focus the resizing on the bottom left."
    BOTTOM_LEFT
    "Focus the resizing on the bottom right."
    BOTTOM_RIGHT
    "Focus the resizing on the center."
    CENTER
    "Focus the resizing on the largest face."
    FACE
    "Focus the resizing on the area containing all the faces."
    FACES
    "Focus the resizing on the left."
    LEFT
    "Focus the resizing on the right."
    RIGHT
    "Focus the resizing on the top."
    TOP
    "Focus the resizing on the top left."
    TOP_LEFT
    "Focus the resizing on the top right."
    TOP_RIGHT
}

enum ImageResizeStrategy {
    "Crops a part of the original image to fit into the specified dimensions."
    CROP
    "Resizes the image to the specified dimensions, cropping the image if needed."
    FILL
    "Resizes the image to fit into the specified dimensions."
    FIT
    """

    Resizes the image to the specified dimensions, padding the image if needed.
    Uses desired background color as padding color.
    """
    PAD
    "Resizes the image to the specified dimensions, changing the original aspect ratio if needed."
    SCALE
    "Creates a thumbnail from the image."
    THUMB
}

enum RoomBathroomOrder {
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
    title_ASC
    title_DESC
}

enum RoomOrder {
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
    title_ASC
    title_DESC
}

enum RoomTypeBathroomOrder {
    bath_ASC
    bath_DESC
    bathroom_ASC
    bathroom_DESC
    hairdryer_ASC
    hairdryer_DESC
    shower_ASC
    shower_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
}

enum RoomTypeBedroomOrder {
    couch_ASC
    couch_DESC
    desk_ASC
    desk_DESC
    doubleBed_ASC
    doubleBed_DESC
    singleBed_ASC
    singleBed_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
}

enum RoomTypeStoreroomOrder {
    locker_ASC
    locker_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
}

enum SometestOrder {
    someText_ASC
    someText_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
}

enum UnitOrder {
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
    title_ASC
    title_DESC
}

"""

A date-time string at UTC, such as 2007-12-03T10:15:30Z,
compliant with the 'date-time' format outlined in section 5.6 of
the RFC 3339 profile of the ISO 8601 standard for representation
of dates and times using the Gregorian calendar.
"""
scalar DateTime

"The 'Dimension' type represents dimensions as whole numeric values between `1` and `4000`."
scalar Dimension

"The 'HexColor' type represents color in `rgb:ffffff` string format."
scalar HexColor

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"The 'Quality' type represents quality as whole numeric values between `1` and `100`."
scalar Quality

input AssetFilter {
    AND: [AssetFilter]
    OR: [AssetFilter]
    contentType: String
    contentType_contains: String
    contentType_exists: Boolean
    contentType_in: [String]
    contentType_not: String
    contentType_not_contains: String
    contentType_not_in: [String]
    contentfulMetadata: ContentfulMetadataFilter
    description: String
    description_contains: String
    description_exists: Boolean
    description_in: [String]
    description_not: String
    description_not_contains: String
    description_not_in: [String]
    fileName: String
    fileName_contains: String
    fileName_exists: Boolean
    fileName_in: [String]
    fileName_not: String
    fileName_not_contains: String
    fileName_not_in: [String]
    height: Int
    height_exists: Boolean
    height_gt: Int
    height_gte: Int
    height_in: [Int]
    height_lt: Int
    height_lte: Int
    height_not: Int
    height_not_in: [Int]
    size: Int
    size_exists: Boolean
    size_gt: Int
    size_gte: Int
    size_in: [Int]
    size_lt: Int
    size_lte: Int
    size_not: Int
    size_not_in: [Int]
    sys: SysFilter
    title: String
    title_contains: String
    title_exists: Boolean
    title_in: [String]
    title_not: String
    title_not_contains: String
    title_not_in: [String]
    url: String
    url_contains: String
    url_exists: Boolean
    url_in: [String]
    url_not: String
    url_not_contains: String
    url_not_in: [String]
    width: Int
    width_exists: Boolean
    width_gt: Int
    width_gte: Int
    width_in: [Int]
    width_lt: Int
    width_lte: Int
    width_not: Int
    width_not_in: [Int]
}

input ContentTypeLocationFilter {
    AND: [ContentTypeLocationFilter]
    OR: [ContentTypeLocationFilter]
    contentfulMetadata: ContentfulMetadataFilter
    description: String
    description_contains: String
    description_exists: Boolean
    description_in: [String]
    description_not: String
    description_not_contains: String
    description_not_in: [String]
    featuredImage_exists: Boolean
    imagesCollection_exists: Boolean
    roomsCollection_exists: Boolean
    slug: String
    slug_contains: String
    slug_exists: Boolean
    slug_in: [String]
    slug_not: String
    slug_not_contains: String
    slug_not_in: [String]
    sys: SysFilter
    title: String
    title_contains: String
    title_exists: Boolean
    title_in: [String]
    title_not: String
    title_not_contains: String
    title_not_in: [String]
    unitsCollection_exists: Boolean
}

input ContentfulMetadataFilter {
    tags: ContentfulMetadataTagsFilter
    tags_exists: Boolean
}

input ContentfulMetadataTagsFilter {
    id_contains_all: [String]
    id_contains_none: [String]
    id_contains_some: [String]
}

input EntryFilter {
    AND: [EntryFilter]
    OR: [EntryFilter]
    contentfulMetadata: ContentfulMetadataFilter
    sys: SysFilter
}

input HostFilter {
    AND: [HostFilter]
    OR: [HostFilter]
    contentfulMetadata: ContentfulMetadataFilter
    email: String
    email_contains: String
    email_exists: Boolean
    email_in: [String]
    email_not: String
    email_not_contains: String
    email_not_in: [String]
    name: String
    name_contains: String
    name_exists: Boolean
    name_in: [String]
    name_not: String
    name_not_contains: String
    name_not_in: [String]
    sys: SysFilter
    vorname: String
    vorname_contains: String
    vorname_exists: Boolean
    vorname_in: [String]
    vorname_not: String
    vorname_not_contains: String
    vorname_not_in: [String]
}

input ImageTransformOptions {
    """

    Desired background color, used with corner radius or `PAD` resize strategy.
    Defaults to transparent (for `PNG`, `PNG8` and `WEBP`) or white (for `JPG` and `JPG_PROGRESSIVE`).
    """
    backgroundColor: HexColor
    """

    Desired corner radius in pixels.
    Results in an image with rounded corners (pass `-1` for a full circle/ellipse).
    Defaults to `0`. Uses desired background color as padding color,
    unless the format is `JPG` or `JPG_PROGRESSIVE` and resize strategy is `PAD`, then defaults to white.
    """
    cornerRadius: Int
    "Desired image format. Defaults to the original image format."
    format: ImageFormat
    "Desired height in pixels. Defaults to the original image height."
    height: Dimension
    """

    Desired quality of the image in percents.
    Used for `PNG8`, `JPG`, `JPG_PROGRESSIVE` and `WEBP` formats.
    """
    quality: Quality
    "Desired resize focus area. Defaults to `CENTER`."
    resizeFocus: ImageResizeFocus
    "Desired resize strategy. Defaults to `FIT`."
    resizeStrategy: ImageResizeStrategy
    "Desired width in pixels. Defaults to the original image width."
    width: Dimension
}

input RoomBathroomFilter {
    AND: [RoomBathroomFilter]
    OR: [RoomBathroomFilter]
    amentities_contains_all: [String]
    amentities_contains_none: [String]
    amentities_contains_some: [String]
    amentities_exists: Boolean
    contentfulMetadata: ContentfulMetadataFilter
    description: String
    description_contains: String
    description_exists: Boolean
    description_in: [String]
    description_not: String
    description_not_contains: String
    description_not_in: [String]
    images_exists: Boolean
    sys: SysFilter
    title: String
    title_contains: String
    title_exists: Boolean
    title_in: [String]
    title_not: String
    title_not_contains: String
    title_not_in: [String]
}

input RoomFilter {
    AND: [RoomFilter]
    OR: [RoomFilter]
    amentities_contains_all: [String]
    amentities_contains_none: [String]
    amentities_contains_some: [String]
    amentities_exists: Boolean
    contentfulMetadata: ContentfulMetadataFilter
    description_contains: String
    description_exists: Boolean
    description_not_contains: String
    imagesCollection_exists: Boolean
    roomType_exists: Boolean
    sys: SysFilter
    title: String
    title_contains: String
    title_exists: Boolean
    title_in: [String]
    title_not: String
    title_not_contains: String
    title_not_in: [String]
    type_exists: Boolean
}

input RoomTypeBathroomFilter {
    AND: [RoomTypeBathroomFilter]
    OR: [RoomTypeBathroomFilter]
    bath: Boolean
    bath_exists: Boolean
    bath_not: Boolean
    bathroom: String
    bathroom_contains: String
    bathroom_exists: Boolean
    bathroom_in: [String]
    bathroom_not: String
    bathroom_not_contains: String
    bathroom_not_in: [String]
    contentfulMetadata: ContentfulMetadataFilter
    hairdryer: Boolean
    hairdryer_exists: Boolean
    hairdryer_not: Boolean
    shower: Boolean
    shower_exists: Boolean
    shower_not: Boolean
    sys: SysFilter
}

input RoomTypeBedroomFilter {
    AND: [RoomTypeBedroomFilter]
    OR: [RoomTypeBedroomFilter]
    contentfulMetadata: ContentfulMetadataFilter
    couch: Boolean
    couch_exists: Boolean
    couch_not: Boolean
    desk: Boolean
    desk_exists: Boolean
    desk_not: Boolean
    doubleBed: Boolean
    doubleBed_exists: Boolean
    doubleBed_not: Boolean
    singleBed: Boolean
    singleBed_exists: Boolean
    singleBed_not: Boolean
    sys: SysFilter
}

input RoomTypeStoreroomFilter {
    AND: [RoomTypeStoreroomFilter]
    OR: [RoomTypeStoreroomFilter]
    contentfulMetadata: ContentfulMetadataFilter
    locker: Boolean
    locker_exists: Boolean
    locker_not: Boolean
    sys: SysFilter
}

input SometestFilter {
    AND: [SometestFilter]
    OR: [SometestFilter]
    contentfulMetadata: ContentfulMetadataFilter
    someText: String
    someText_contains: String
    someText_exists: Boolean
    someText_in: [String]
    someText_not: String
    someText_not_contains: String
    someText_not_in: [String]
    sys: SysFilter
}

input SysFilter {
    firstPublishedAt: DateTime
    firstPublishedAt_exists: Boolean
    firstPublishedAt_gt: DateTime
    firstPublishedAt_gte: DateTime
    firstPublishedAt_in: [DateTime]
    firstPublishedAt_lt: DateTime
    firstPublishedAt_lte: DateTime
    firstPublishedAt_not: DateTime
    firstPublishedAt_not_in: [DateTime]
    id: String
    id_contains: String
    id_exists: Boolean
    id_in: [String]
    id_not: String
    id_not_contains: String
    id_not_in: [String]
    publishedAt: DateTime
    publishedAt_exists: Boolean
    publishedAt_gt: DateTime
    publishedAt_gte: DateTime
    publishedAt_in: [DateTime]
    publishedAt_lt: DateTime
    publishedAt_lte: DateTime
    publishedAt_not: DateTime
    publishedAt_not_in: [DateTime]
    publishedVersion: Float
    publishedVersion_exists: Boolean
    publishedVersion_gt: Float
    publishedVersion_gte: Float
    publishedVersion_in: [Float]
    publishedVersion_lt: Float
    publishedVersion_lte: Float
    publishedVersion_not: Float
    publishedVersion_not_in: [Float]
}

input UnitFilter {
    AND: [UnitFilter]
    OR: [UnitFilter]
    contentfulMetadata: ContentfulMetadataFilter
    description: String
    description_contains: String
    description_exists: Boolean
    description_in: [String]
    description_not: String
    description_not_contains: String
    description_not_in: [String]
    imagesCollection_exists: Boolean
    roomsCollection_exists: Boolean
    sys: SysFilter
    title: String
    title_contains: String
    title_exists: Boolean
    title_in: [String]
    title_not: String
    title_not_contains: String
    title_not_in: [String]
}
